{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\NodeJS\\\\TestVKMiniApp\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\NodeJS\\\\TestVKMiniApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport { EventEmitter } from 'fbemitter';\nimport ExponentUpdates from './ExponentUpdates';\nexport function reload() {\n  return _reload.apply(this, arguments);\n}\n\nfunction _reload() {\n  _reload = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return ExponentUpdates.reload();\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _reload.apply(this, arguments);\n}\n\nexport function reloadFromCache() {\n  return _reloadFromCache.apply(this, arguments);\n}\n\nfunction _reloadFromCache() {\n  _reloadFromCache = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return ExponentUpdates.reloadFromCache();\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _reloadFromCache.apply(this, arguments);\n}\n\nexport function checkForUpdateAsync() {\n  return _checkForUpdateAsync.apply(this, arguments);\n}\n\nfunction _checkForUpdateAsync() {\n  _checkForUpdateAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (ExponentUpdates.checkForUpdateAsync) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n\n          case 2:\n            _context3.next = 4;\n            return ExponentUpdates.checkForUpdateAsync();\n\n          case 4:\n            result = _context3.sent;\n\n            if (result) {\n              _context3.next = 7;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", {\n              isAvailable: false\n            });\n\n          case 7:\n            return _context3.abrupt(\"return\", {\n              isAvailable: true,\n              manifest: typeof result === 'string' ? JSON.parse(result) : result\n            });\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _checkForUpdateAsync.apply(this, arguments);\n}\n\nexport function fetchUpdateAsync() {\n  return _fetchUpdateAsync.apply(this, arguments);\n}\n\nfunction _fetchUpdateAsync() {\n  _fetchUpdateAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4() {\n    var _ref,\n        eventListener,\n        subscription,\n        result,\n        _args4 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _ref = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {}, eventListener = _ref.eventListener;\n\n            if (ExponentUpdates.fetchUpdateAsync) {\n              _context4.next = 3;\n              break;\n            }\n\n            throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n\n          case 3:\n            if (eventListener && typeof eventListener === 'function') {\n              subscription = addListener(eventListener);\n            }\n\n            _context4.prev = 4;\n            _context4.next = 7;\n            return ExponentUpdates.fetchUpdateAsync();\n\n          case 7:\n            result = _context4.sent;\n\n          case 8:\n            _context4.prev = 8;\n            subscription && subscription.remove();\n            return _context4.finish(8);\n\n          case 11:\n            if (result) {\n              _context4.next = 13;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", {\n              isNew: false\n            });\n\n          case 13:\n            return _context4.abrupt(\"return\", {\n              isNew: true,\n              manifest: typeof result === 'string' ? JSON.parse(result) : result\n            });\n\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[4,, 8, 11]]);\n  }));\n  return _fetchUpdateAsync.apply(this, arguments);\n}\n\nexport function clearUpdateCacheExperimentalAsync(_x) {\n  return _clearUpdateCacheExperimentalAsync.apply(this, arguments);\n}\n\nfunction _clearUpdateCacheExperimentalAsync() {\n  _clearUpdateCacheExperimentalAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(abiVersion) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (ExponentUpdates.clearUpdateCacheAsync) {\n              _context5.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n\n          case 2:\n            return _context5.abrupt(\"return\", ExponentUpdates.clearUpdateCacheAsync(abiVersion));\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _clearUpdateCacheExperimentalAsync.apply(this, arguments);\n}\n\nvar _emitter;\n\nfunction _getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n\n  return _emitter;\n}\n\nfunction _emitEvent(params) {\n  var newParams = params;\n\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(\"EventEmitter must be initialized to use from its listener\");\n  }\n\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener) {\n  var emitter = _getEmitter();\n\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\nexport var EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error'\n};","map":null,"metadata":{},"sourceType":"module"}