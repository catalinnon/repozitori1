{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\NodeJS\\\\TestVKMiniApp\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\NodeJS\\\\TestVKMiniApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\NodeJS\\\\TestVKMiniApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { EventEmitter, Platform, UnavailabilityError } from '@unimodules/core';\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock } from './ScreenOrientation.types';\nexport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock };\n\nvar _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\n\nvar _orientationChangeSubscribers = [];\nvar _lastOrientationLock = OrientationLock.UNKNOWN;\nexport function allow(orientationLock) {\n  console.warn(\"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\");\n  lockAsync(orientationLock);\n}\nexport function allowAsync(_x) {\n  return _allowAsync.apply(this, arguments);\n}\n\nfunction _allowAsync() {\n  _allowAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(orientationLock) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.warn(\"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\");\n            _context2.next = 3;\n            return lockAsync(orientationLock);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _allowAsync.apply(this, arguments);\n}\n\nexport function lockAsync(_x2) {\n  return _lockAsync.apply(this, arguments);\n}\n\nfunction _lockAsync() {\n  _lockAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(orientationLock) {\n    var orientationLocks;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (ExpoScreenOrientation.lockAsync) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n\n          case 2:\n            orientationLocks = Object.values(OrientationLock);\n\n            if (orientationLocks.includes(orientationLock)) {\n              _context3.next = 5;\n              break;\n            }\n\n            throw new TypeError(\"Invalid Orientation Lock: \".concat(orientationLock));\n\n          case 5:\n            if (!(orientationLock === OrientationLock.OTHER)) {\n              _context3.next = 7;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 7:\n            _context3.next = 9;\n            return ExpoScreenOrientation.lockAsync(orientationLock);\n\n          case 9:\n            _lastOrientationLock = orientationLock;\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _lockAsync.apply(this, arguments);\n}\n\nexport function lockPlatformAsync(_x3) {\n  return _lockPlatformAsync.apply(this, arguments);\n}\n\nfunction _lockPlatformAsync() {\n  _lockPlatformAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(options) {\n    var screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb, platformOrientationParam, orientations, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, orientation, webOrientationLocks;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (ExpoScreenOrientation.lockPlatformAsync) {\n              _context4.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n\n          case 2:\n            screenOrientationConstantAndroid = options.screenOrientationConstantAndroid, screenOrientationArrayIOS = options.screenOrientationArrayIOS, screenOrientationLockWeb = options.screenOrientationLockWeb;\n\n            if (!(Platform.OS === 'android' && screenOrientationConstantAndroid)) {\n              _context4.next = 9;\n              break;\n            }\n\n            if (!isNaN(screenOrientationConstantAndroid)) {\n              _context4.next = 6;\n              break;\n            }\n\n            throw new TypeError(\"lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with \".concat(screenOrientationConstantAndroid));\n\n          case 6:\n            platformOrientationParam = screenOrientationConstantAndroid;\n            _context4.next = 47;\n            break;\n\n          case 9:\n            if (!(Platform.OS === 'ios' && screenOrientationArrayIOS)) {\n              _context4.next = 42;\n              break;\n            }\n\n            if (Array.isArray(screenOrientationArrayIOS)) {\n              _context4.next = 12;\n              break;\n            }\n\n            throw new TypeError(\"lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with \".concat(screenOrientationArrayIOS));\n\n          case 12:\n            orientations = Object.values(Orientation);\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context4.prev = 16;\n            _iterator = screenOrientationArrayIOS[Symbol.iterator]();\n\n          case 18:\n            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n              _context4.next = 25;\n              break;\n            }\n\n            orientation = _step.value;\n\n            if (orientations.includes(orientation)) {\n              _context4.next = 22;\n              break;\n            }\n\n            throw new TypeError(\"lockPlatformAsync iOS platform: \".concat(orientation, \" is not a valid Orientation\"));\n\n          case 22:\n            _iteratorNormalCompletion = true;\n            _context4.next = 18;\n            break;\n\n          case 25:\n            _context4.next = 31;\n            break;\n\n          case 27:\n            _context4.prev = 27;\n            _context4.t0 = _context4[\"catch\"](16);\n            _didIteratorError = true;\n            _iteratorError = _context4.t0;\n\n          case 31:\n            _context4.prev = 31;\n            _context4.prev = 32;\n\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n\n          case 34:\n            _context4.prev = 34;\n\n            if (!_didIteratorError) {\n              _context4.next = 37;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 37:\n            return _context4.finish(34);\n\n          case 38:\n            return _context4.finish(31);\n\n          case 39:\n            platformOrientationParam = screenOrientationArrayIOS;\n            _context4.next = 47;\n            break;\n\n          case 42:\n            if (!(Platform.OS === 'web' && screenOrientationLockWeb)) {\n              _context4.next = 47;\n              break;\n            }\n\n            webOrientationLocks = Object.values(WebOrientationLock);\n\n            if (webOrientationLocks.includes(screenOrientationLockWeb)) {\n              _context4.next = 46;\n              break;\n            }\n\n            throw new TypeError(\"Invalid Web Orientation Lock: \".concat(screenOrientationLockWeb));\n\n          case 46:\n            platformOrientationParam = screenOrientationLockWeb;\n\n          case 47:\n            if (platformOrientationParam) {\n              _context4.next = 49;\n              break;\n            }\n\n            throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n\n          case 49:\n            _context4.next = 51;\n            return ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n\n          case 51:\n            _lastOrientationLock = OrientationLock.OTHER;\n\n          case 52:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[16, 27, 31, 39], [32,, 34, 38]]);\n  }));\n  return _lockPlatformAsync.apply(this, arguments);\n}\n\nexport function unlockAsync() {\n  return _unlockAsync.apply(this, arguments);\n}\n\nfunction _unlockAsync() {\n  _unlockAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5() {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (ExpoScreenOrientation.unlockAsync) {\n              _context5.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n\n          case 2:\n            _context5.next = 4;\n            return ExpoScreenOrientation.unlockAsync();\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _unlockAsync.apply(this, arguments);\n}\n\nexport function getOrientationAsync() {\n  return _getOrientationAsync.apply(this, arguments);\n}\n\nfunction _getOrientationAsync() {\n  _getOrientationAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6() {\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (ExpoScreenOrientation.getOrientationAsync) {\n              _context6.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n\n          case 2:\n            _context6.next = 4;\n            return ExpoScreenOrientation.getOrientationAsync();\n\n          case 4:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getOrientationAsync.apply(this, arguments);\n}\n\nexport function getOrientationLockAsync() {\n  return _getOrientationLockAsync.apply(this, arguments);\n}\n\nfunction _getOrientationLockAsync() {\n  _getOrientationLockAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee7() {\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            if (ExpoScreenOrientation.getOrientationLockAsync) {\n              _context7.next = 2;\n              break;\n            }\n\n            return _context7.abrupt(\"return\", _lastOrientationLock);\n\n          case 2:\n            _context7.next = 4;\n            return ExpoScreenOrientation.getOrientationLockAsync();\n\n          case 4:\n            return _context7.abrupt(\"return\", _context7.sent);\n\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getOrientationLockAsync.apply(this, arguments);\n}\n\nexport function getPlatformOrientationLockAsync() {\n  return _getPlatformOrientationLockAsync.apply(this, arguments);\n}\n\nfunction _getPlatformOrientationLockAsync() {\n  _getPlatformOrientationLockAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee8() {\n    var platformOrientationLock;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return ExpoScreenOrientation.getPlatformOrientationLockAsync();\n\n          case 2:\n            platformOrientationLock = _context8.sent;\n\n            if (!(Platform.OS === 'android')) {\n              _context8.next = 7;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", {\n              screenOrientationConstantAndroid: platformOrientationLock\n            });\n\n          case 7:\n            if (!(Platform.OS === 'ios')) {\n              _context8.next = 11;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", {\n              screenOrientationArrayIOS: platformOrientationLock\n            });\n\n          case 11:\n            if (!(Platform.OS === 'web')) {\n              _context8.next = 15;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", {\n              screenOrientationLockWeb: platformOrientationLock\n            });\n\n          case 15:\n            return _context8.abrupt(\"return\", {});\n\n          case 16:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _getPlatformOrientationLockAsync.apply(this, arguments);\n}\n\nexport function supportsOrientationLockAsync(_x4) {\n  return _supportsOrientationLockAsync.apply(this, arguments);\n}\n\nfunction _supportsOrientationLockAsync() {\n  _supportsOrientationLockAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee9(orientationLock) {\n    var orientationLocks;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (ExpoScreenOrientation.supportsOrientationLockAsync) {\n              _context9.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n\n          case 2:\n            orientationLocks = Object.values(OrientationLock);\n\n            if (orientationLocks.includes(orientationLock)) {\n              _context9.next = 5;\n              break;\n            }\n\n            throw new TypeError(\"Invalid Orientation Lock: \".concat(orientationLock));\n\n          case 5:\n            _context9.next = 7;\n            return ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n\n          case 7:\n            return _context9.abrupt(\"return\", _context9.sent);\n\n          case 8:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _supportsOrientationLockAsync.apply(this, arguments);\n}\n\nexport function doesSupportAsync(_x5) {\n  return _doesSupportAsync.apply(this, arguments);\n} // Determine the event name lazily so Jest can set up mocks in advance\n\nfunction _doesSupportAsync() {\n  _doesSupportAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee10(orientationLock) {\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            console.warn(\"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\");\n            _context10.next = 3;\n            return supportsOrientationLockAsync(orientationLock);\n\n          case 3:\n            return _context10.abrupt(\"return\", _context10.sent);\n\n          case 4:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _doesSupportAsync.apply(this, arguments);\n}\n\nfunction getEventName() {\n  return Platform.OS === 'ios' || Platform.OS === 'web' ? 'expoDidUpdateDimensions' : 'didUpdateDimensions';\n} // We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\n\n\nexport function addOrientationChangeListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError(\"addOrientationChangeListener cannot be called with \".concat(listener));\n  }\n\n  var subscription = _orientationChangeEmitter.addListener(getEventName(),\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(update) {\n      var orientationInfo, orientationLock, _ref2, _ref3;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS === 'ios' || Platform.OS === 'web')) {\n                _context.next = 5;\n                break;\n              }\n\n              // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions` event, so we emit our own `expoDidUpdateDimensions` event instead\n              orientationLock = update.orientationLock;\n              orientationInfo = update.orientationInfo;\n              _context.next = 11;\n              break;\n\n            case 5:\n              _context.next = 7;\n              return Promise.all([getOrientationLockAsync(), getOrientationAsync()]);\n\n            case 7:\n              _ref2 = _context.sent;\n              _ref3 = _slicedToArray(_ref2, 2);\n              orientationLock = _ref3[0];\n              orientationInfo = _ref3[1];\n\n            case 11:\n              listener({\n                orientationInfo: orientationInfo,\n                orientationLock: orientationLock\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x6) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  _orientationChangeSubscribers.push(subscription);\n\n  return subscription;\n} // We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\n\nexport function removeOrientationChangeListeners() {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  var i = _orientationChangeSubscribers.length;\n\n  while (i--) {\n    var subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove(); // remove after a successful unsubscribe\n\n    _orientationChangeSubscribers.pop();\n  }\n}\nexport function removeOrientationChangeListener(subscription) {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(\"Must pass in a valid subscription\");\n  }\n\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(function (sub) {\n    return sub !== subscription;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}