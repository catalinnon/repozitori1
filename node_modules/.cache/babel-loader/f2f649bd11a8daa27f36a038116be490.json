{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\NodeJS\\\\TestVKMiniApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\NodeJS\\\\TestVKMiniApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\NodeJS\\\\TestVKMiniApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _slicedToArray from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\NodeJS\\\\TestVKMiniApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\NodeJS\\\\TestVKMiniApp\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\NodeJS\\\\TestVKMiniApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar assertMiddleware = function assertMiddleware(middleware) {\n  if (typeof middleware !== 'function') {\n    throw new TypeError('Middleware must be composed of function!');\n  }\n};\n\nvar assertMiddlewares = function assertMiddlewares(middlewares) {\n  middlewares.forEach(assertMiddleware);\n};\n\nvar wrapMiddlewareNextCall =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(context, middleware) {\n    var called;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            called = false;\n            _context2.next = 3;\n            return middleware(context,\n            /*#__PURE__*/\n            _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      called = true;\n\n                    case 1:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            })));\n\n          case 3:\n            return _context2.abrupt(\"return\", called);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function wrapMiddlewareNextCall(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\r\n * Noop for call `next()` in middleware\r\n */\n\n\nvar noopNext =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function noopNext() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n/**\r\n * Compose an array of middleware handlers into a single handler\r\n *\r\n * @param middlewares - The array of middleware\r\n *\r\n * @returns Composed middleware\r\n */\n\n\nfunction _compose(middlewares) {\n  assertMiddlewares(middlewares);\n\n  if (middlewares.length === 0) {\n    return function (context, next) {\n      return Promise.resolve(next());\n    };\n  }\n\n  if (middlewares.length === 1) {\n    var _middlewares = _slicedToArray(middlewares, 1),\n        middleware = _middlewares[0];\n\n    return function (context, next) {\n      return Promise.resolve(middleware(context, next));\n    };\n  }\n\n  return function (context, next) {\n    var lastIndex = -1;\n\n    var nextDispatch = function nextDispatch(index) {\n      if (index <= lastIndex) {\n        throw new Error('next() called multiple times');\n      }\n\n      lastIndex = index;\n      var middleware = middlewares[index];\n\n      if (!middleware) {\n        return next();\n      }\n\n      try {\n        return Promise.resolve(middleware(context, function () {\n          return nextDispatch(index + 1);\n        }));\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    };\n\n    return nextDispatch(0);\n  };\n}\n/**\r\n * Call `next()` in middleware\r\n */\n\n\nvar skipMiddleware = function skipMiddleware(context, next) {\n  return next();\n};\n/**\r\n * Does not call `next()` in middleware\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nvar stopMiddleware = function stopMiddleware(context, next) {};\n/**\r\n * Lazily asynchronously gets middleware\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * getLazyMiddleware(async (context) => {\r\n *   const route = await getSomeRoute(context.path) // Promise<Function>;\r\n *\r\n *   return route;\r\n * });\r\n * ```\r\n */\n\n\nvar getLazyMiddleware = function getLazyMiddleware(factory) {\n  var middleware;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(context, next) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(middleware === undefined)) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                _context4.next = 3;\n                return factory(context);\n\n              case 3:\n                middleware = _context4.sent;\n\n              case 4:\n                return _context4.abrupt(\"return\", middleware(context, next));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};\n/**\r\n * Runs the middleware and force call `next()`\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * getTapMiddleware((context) => {\r\n *   console.log('Context', context);\r\n * });\r\n * ```\r\n */\n\n\nvar getTapMiddleware = function getTapMiddleware(middleware) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(context, next) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return middleware(context, noopNext);\n\n              case 2:\n                return _context5.abrupt(\"return\", next());\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};\n/**\r\n * Runs the middleware at the next event loop and force call `next()`\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * getForkMiddleware((context) => {\r\n *   statisticsMiddlewares(context).catch(console.error);\r\n * });\r\n * ```\r\n */\n\n\nvar getForkMiddleware = function getForkMiddleware(middleware) {\n  return function (context, next) {\n    setImmediate(middleware, context, noopNext);\n    return next();\n  };\n};\n/**\r\n * By condition splits the middleware\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * getBranchMiddleware(\r\n *   async context => context.is('Content-Type', 'json'),\r\n *   myBodyParser.json(),\r\n *   myBodyParser.urlencoded()\r\n * );\r\n * ```\r\n *\r\n * Static condition\r\n *\r\n * ```ts\r\n * getBranchMiddleware(\r\n    *   process.env.NODE_ENV === 'production',\r\n    *   logger.loggedContextToFile(),\r\n    *   logger.loggedContextToConsole()\r\n    * );\r\n    * ```\r\n */\n\n\nvar getBranchMiddleware = function getBranchMiddleware(condition, trueMiddleware, falseMiddleware) {\n  if (typeof condition !== 'function') {\n    return condition ? trueMiddleware : falseMiddleware;\n  }\n\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(context, next) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return condition(context);\n\n              case 2:\n                if (!_context6.sent) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                _context6.t0 = trueMiddleware(context, next);\n                _context6.next = 7;\n                break;\n\n              case 6:\n                _context6.t0 = falseMiddleware(context, next);\n\n              case 7:\n                return _context6.abrupt(\"return\", _context6.t0);\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x7, _x8) {\n        return _ref6.apply(this, arguments);\n      };\n    }()\n  );\n};\n/**\r\n * Conditionally runs optional middleware or skips middleware\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * getOptionalMiddleware(\r\n *   context => context.user.isAdmin,\r\n *   addFieldsForAdmin\r\n * );\r\n * ```\r\n */\n\n\nvar getOptionalMiddleware = function getOptionalMiddleware(condition, optionalMiddleware) {\n  return getBranchMiddleware(condition, optionalMiddleware, skipMiddleware);\n};\n/**\r\n * Conditionally runs middleware or stops the chain\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * getFilterMiddleware(\r\n *   context => context.authorized,\r\n *   middlewareForAuthorized\r\n * );\r\n * ```\r\n */\n\n\nvar getFilterMiddleware = function getFilterMiddleware(condition, filterMiddleware) {\n  return getBranchMiddleware(condition, filterMiddleware, stopMiddleware);\n};\n/**\r\n * Runs the second middleware before the main\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * getBeforeMiddleware(\r\n *   ouputUserData,\r\n *   myMockMiddleware\r\n * );\r\n * ```\r\n */\n\n\nvar getBeforeMiddleware = function getBeforeMiddleware(middleware, beforeMiddleware) {\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line consistent-return\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(context, next) {\n        var called;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return wrapMiddlewareNextCall(context, beforeMiddleware);\n\n              case 2:\n                called = _context7.sent;\n\n                if (!called) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", middleware(context, next));\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function (_x9, _x10) {\n        return _ref7.apply(this, arguments);\n      };\n    }()\n  );\n};\n/**\r\n * Runs the second middleware after the main\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * getAfterMiddleware(\r\n *   sendSecureData,\r\n *   clearSecurityData\r\n * );\r\n * ```\r\n */\n\n\nvar getAfterMiddleware = function getAfterMiddleware(middleware, afterMiddleware) {\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line consistent-return\n    function () {\n      var _ref8 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(context, next) {\n        var called;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return wrapMiddlewareNextCall(context, middleware);\n\n              case 2:\n                called = _context8.sent;\n\n                if (!called) {\n                  _context8.next = 5;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", afterMiddleware(context, next));\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      return function (_x11, _x12) {\n        return _ref8.apply(this, arguments);\n      };\n    }()\n  );\n};\n/**\r\n * Runs middleware before and after the main\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * getEnforceMiddleware(\r\n *   prepareData,\r\n *   sendData,\r\n *   clearData\r\n * );\r\n */\n\n\nvar getEnforceMiddleware = function getEnforceMiddleware(middleware, beforeMiddleware, afterMiddleware) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref9 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(context, next) {\n        var beforeCalled, middlewareCalled;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return wrapMiddlewareNextCall(context, beforeMiddleware);\n\n              case 2:\n                beforeCalled = _context9.sent;\n\n                if (beforeCalled) {\n                  _context9.next = 5;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\");\n\n              case 5:\n                _context9.next = 7;\n                return wrapMiddlewareNextCall(context, middleware);\n\n              case 7:\n                middlewareCalled = _context9.sent;\n\n                if (middlewareCalled) {\n                  _context9.next = 10;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\");\n\n              case 10:\n                return _context9.abrupt(\"return\", afterMiddleware(context, next));\n\n              case 11:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      return function (_x13, _x14) {\n        return _ref9.apply(this, arguments);\n      };\n    }()\n  );\n};\n/**\r\n * Catches errors in the middleware chain\r\n *\r\n * Example:\r\n * ```js\r\n * getCaughtMiddleware((context, error) => {\r\n *   if (error instanceof NetworkError) {\r\n *     return context.send('Sorry, network issues 😔');\r\n *   }\r\n *\r\n *   throw error;\r\n * })\r\n * ```\r\n *\r\n * Without a snippet, it would look like this:\r\n *\r\n * ```js\r\n * async (context, next) => {\r\n *   try {\r\n *     await next();\r\n *   } catch (error) {\r\n *     if (error instanceof NetworkError) {\r\n *       return context.send('Sorry, network issues 😔');\r\n *     }\r\n *\r\n *     throw error;\r\n *   }\r\n * };\r\n * ```\r\n */\n\n\nvar getCaughtMiddleware = function getCaughtMiddleware(errorHandler) {\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line consistent-return\n    function () {\n      var _ref10 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(context, next) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                _context10.next = 3;\n                return next();\n\n              case 3:\n                _context10.next = 8;\n                break;\n\n              case 5:\n                _context10.prev = 5;\n                _context10.t0 = _context10[\"catch\"](0);\n                return _context10.abrupt(\"return\", errorHandler(context, _context10.t0));\n\n              case 8:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[0, 5]]);\n      }));\n\n      return function (_x15, _x16) {\n        return _ref10.apply(this, arguments);\n      };\n    }()\n  );\n};\n/**\r\n * Concurrently launches middleware,\r\n * the chain will continue if `next()` is called in all middlewares\r\n *\r\n * **Warning: Error interrupts all others**\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * getConcurrencyMiddleware(\r\n *   initializeUser,\r\n *   initializeSession,\r\n *   initializeDatabase\r\n * );\r\n * ```\r\n */\n\n\nvar getConcurrencyMiddleware = function getConcurrencyMiddleware(middlewares) {\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line consistent-return\n    function () {\n      var _ref11 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(context, next) {\n        var concurrencies;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return Promise.all(middlewares.map(function (middleware) {\n                  return wrapMiddlewareNextCall(context, middleware);\n                }));\n\n              case 2:\n                concurrencies = _context11.sent;\n\n                if (!concurrencies.every(Boolean)) {\n                  _context11.next = 5;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\", next());\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n\n      return function (_x17, _x18) {\n        return _ref11.apply(this, arguments);\n      };\n    }()\n  );\n};\n/**\r\n * A simple middleware compose builder\r\n */\n\n\nvar Composer =\n/*#__PURE__*/\nfunction () {\n  function Composer() {\n    _classCallCheck(this, Composer);\n\n    this.middlewares = [];\n  }\n  /**\r\n   * Adds middleware to the chain\r\n   */\n\n\n  _createClass(Composer, [{\n    key: \"use\",\n    value: function use(middleware) {\n      assertMiddleware(middleware);\n      this.middlewares.push(middleware);\n      return this;\n    }\n    /**\r\n     * Lazily asynchronously gets middleware\r\n     */\n\n  }, {\n    key: \"lazy\",\n    value: function lazy(factory) {\n      return this.use(getLazyMiddleware(factory));\n    }\n    /**\r\n     * Runs the middleware and force call `next()`\r\n     */\n\n  }, {\n    key: \"tap\",\n    value: function tap(middleware) {\n      return this.use(getTapMiddleware(middleware));\n    }\n    /**\r\n     * Runs the middleware at the next event loop and force call `next()`\r\n     */\n\n  }, {\n    key: \"fork\",\n    value: function fork(middleware) {\n      return this.use(getForkMiddleware(middleware));\n    }\n    /**\r\n     * By condition splits the middleware\r\n     */\n\n  }, {\n    key: \"branch\",\n    value: function branch(condition, trueMiddleware, falseMiddleware) {\n      return this.use(getBranchMiddleware(condition, trueMiddleware, falseMiddleware));\n    }\n    /**\r\n     * Conditionally runs optional middleware or skips middleware\r\n     */\n\n  }, {\n    key: \"optional\",\n    value: function optional(condition, optionalMiddleware) {\n      return this.use(getOptionalMiddleware(condition, optionalMiddleware));\n    }\n    /**\r\n     * Conditionally runs middleware or stops the chain\r\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(condition, filterMiddleware) {\n      return this.use(getFilterMiddleware(condition, filterMiddleware));\n    }\n    /**\r\n     * Runs the second middleware before the main\r\n     */\n\n  }, {\n    key: \"before\",\n    value: function before(middleware, beforeMiddleware) {\n      return this.use(getBeforeMiddleware(middleware, beforeMiddleware));\n    }\n    /**\r\n     * Runs the second middleware after the main\r\n     */\n\n  }, {\n    key: \"after\",\n    value: function after(middleware, afterMiddleware) {\n      return this.use(getAfterMiddleware(middleware, afterMiddleware));\n    }\n    /**\r\n     * Runs middleware before and after the main\r\n     */\n\n  }, {\n    key: \"enforce\",\n    value: function enforce(middleware, beforeMiddleware, afterMiddleware) {\n      return this.use(getEnforceMiddleware(middleware, beforeMiddleware, afterMiddleware));\n    }\n    /**\r\n     * Catches errors in the middleware chain\r\n     */\n\n  }, {\n    key: \"caught\",\n    value: function caught(errorHandler) {\n      return this.use(getCaughtMiddleware(errorHandler));\n    }\n    /**\r\n     * Concurrently launches middleware,\r\n     * the chain will continue if `next()` is called in all middlewares\r\n     */\n\n  }, {\n    key: \"concurrency\",\n    value: function concurrency(middlewares) {\n      return this.use(getConcurrencyMiddleware(middlewares));\n    }\n    /**\r\n     * Compose middleware handlers into a single handler\r\n     */\n\n  }, {\n    key: \"compose\",\n    value: function compose() {\n      return _compose(_toConsumableArray(this.middlewares));\n    }\n  }]);\n\n  return Composer;\n}();\n\nexport default _compose;\nexport { Composer, _compose as compose, getAfterMiddleware, getBeforeMiddleware, getBranchMiddleware, getCaughtMiddleware, getConcurrencyMiddleware, getEnforceMiddleware, getFilterMiddleware, getForkMiddleware, getLazyMiddleware, getOptionalMiddleware, getTapMiddleware, noopNext, skipMiddleware, stopMiddleware };","map":null,"metadata":{},"sourceType":"module"}